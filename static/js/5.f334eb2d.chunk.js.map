{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageInput.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js"],"names":["DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","text","MessageInputContainer","connect","state","dialogsPage","dispatch","sendMessage","action","sendMessageActionCreator","onSubmit","e","validate","errors","length","render","handleSubmit","input","meta","placeholder","touched","error","type","Dialogs","dialogsElements","dialogsData","map","messagesElements","messagesData","newMessageData","dialogs","dialogsItems","messages","compose","messageText","withAuthRedirect","module","exports","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React"],"mappings":"kKAaeA,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCIvBC,EARC,SAACT,GACb,OACI,8BACI,qBAAKG,UAAWC,IAAQM,QAAxB,SAAkCV,EAAMW,U,uBCoDrCC,EAHeC,aAjBR,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACC,GACxB,MAAO,CACLC,YAAa,SAACN,GACZ,IAAIO,EAASC,YAAyBR,GACtCK,EAASE,OAOaL,EApDF,SAACb,GAa3B,OAAO,cAAC,IAAD,CACLoB,SAZiB,SAACC,GACdrB,EAAMiB,YAAYI,EAAEX,UAYxBY,SAViB,SAACD,GACd,IAAME,EAAS,GAIf,OAHIF,EAAEX,SAAgC,IAArBW,EAAEX,QAAQc,SACvBD,EAAOb,QAAU,uBAEda,GAMXE,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACN,uBAAMN,SAAUM,EAAhB,UACE,cAAC,IAAD,CACElB,KAAK,UACLiB,OAAQ,gBAAGE,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACN,gCAEE,sCAAUC,YAAY,sBAAyBF,IAC9CC,EAAKE,SAAWF,EAAKG,OAAS,+BAAOH,EAAKG,cAIjD,wBAAQC,KAAK,SAAb,mCCsBOC,EA3CC,SAACjC,GACb,IAAIkC,EAAkBlC,EAAMe,YAAYoB,YAAYC,KAAI,SAAC/B,GAAD,OAAY,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAMN,GAAIG,EAAOH,QAC1GmC,EAAmBrC,EAAMe,YAAYuB,aAAaF,KAAI,SAAC1B,GAAD,OAAa,cAAC,EAAD,CAASC,KAAMD,EAAQC,UACzEX,EAAMe,YAAYwB,eAoBvC,OAEI,sBAAKpC,UAAWC,IAAQoC,QAAxB,UACI,qBAAKrC,UAAWC,IAAQqC,aAAxB,SACKP,IAEL,sBAAK/B,UAAWC,IAAQsC,SAAxB,UACKL,EAED,8BAAK,cAAC,EAAD,CAAuBpB,YAAajB,EAAMiB,uB,gBCuBhD0B,sBACX9B,aA5BkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACC,GACtB,MAAO,CACHC,YAAa,SAAC2B,GACV5B,EAASG,YAAyByB,SAoB1CC,IAFWF,CAGbV,I,mBCpEFa,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,iBAAmB,oC,mJCG3PC,EAA6B,SAAClC,GAAD,MAAY,CACzCmC,OAAQnC,EAAMoC,KAAKD,SAIVJ,EAAmB,SAACM,GAAe,IACrCC,EADoC,4JAEvC,WACI,OAAKC,KAAKrD,MAAMiD,OACT,cAACE,EAAD,eAAeE,KAAKrD,QADI,cAAC,IAAD,CAAUO,GAAI,eAHV,GACV+C,IAAMH,WAOvC,OADqCtC,YAAQmC,EAARnC,CAAoCuC","file":"static/js/5.f334eb2d.chunk.js","sourcesContent":["import classes from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\n\n\nconst DialogItem = (props) => {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div className={classes.dialog + ' ' + classes.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import classes from './../Dialogs.module.css';\n\n\n\nconst Message = (props) => {\n    return (\n        <div>\n            <div className={classes.message}>{props.text}</div>\n        </div>\n    )\n}\n\nexport default Message;","import { Form, Field } from 'react-final-form'\nimport { connect } from 'react-redux';\nimport { sendMessageActionCreator } from '../../redux/dialogsReducer';\n\nexport const MessageInput = (props) => {\n    \n    const onSubmit = (e) => {\n        props.sendMessage(e.message);\n    }\n    const validate = (e) => {\n        const errors = {};\n        if (e.message && e.message.length === 0) {\n            errors.message = 'Enter a valid email';\n        }\n        return errors;\n    }\n     \n  return <Form\n    onSubmit={onSubmit}\n    validate={validate}\n    render={({ handleSubmit }) => (\n      <form onSubmit={handleSubmit}>\n        <Field\n          name=\"message\"\n          render={({ input, meta }) => (\n            <div>\n              {/* <label>Enter your message</label> */}\n              <textarea placeholder='Enter your message' {...input} />\n              {meta.touched && meta.error && <span>{meta.error}</span>}\n            </div>\n          )}\n        />\n        <button type=\"submit\">Send message</button>\n      </form>\n    )}\n  />\n}\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage \n    }\n  }\n  \n  let mapDispatchToProps = (dispatch) => {\n    return {\n      sendMessage: (text) => {\n        let action = sendMessageActionCreator(text);\n        dispatch(action);\n      },\n    }\n  }\n  \n  \n  \n  let MessageInputContainer = connect(mapStateToProps, mapDispatchToProps)(MessageInput); \n  \n  \nexport default MessageInputContainer;\n","import React from 'react';\nimport classes from './Dialogs.module.css';\nimport { NavLink, Redirect } from 'react-router-dom';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\n//import { updateNewMessageData } from '../../redux/state';\nimport { onMessageChangeActionCreator, sendMessageActionCreator } from './../../redux/dialogsReducer';\nimport MessageInputContainer from './MessageInput';\n\n\n\nconst Dialogs = (props) => {\n    let dialogsElements = props.dialogsPage.dialogsData.map((dialog) => <DialogItem name={dialog.name} id={dialog.id} />);\n    let messagesElements = props.dialogsPage.messagesData.map((message) => <Message text={message.text} />);\n    let newMessageData = props.dialogsPage.newMessageData;\n\n    let newMessageElement = React.createRef();\n    let sendMessage = () => {\n        props.sendMessage();\n/*         let messageText = newMessageElement.current.value;\n        props.dispatch(sendMessageActionCreator());\n        newMessageElement.current.value = ''; */\n\n\n    }\n   /*  let onMessageChange = () => {\n        let messageText = newMessageElement.current.value;\n        props.updateNewMessageData(messageText);\n         props.dispatch(onMessageChangeActionCreator(messageText)); \n    }\n */\n\n   /*  if (!props.isAuth) return <Redirect to={'/login'} />\n */\n    return (\n         \n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={classes.messages}>\n                {messagesElements}\n               {/*  <textarea placeholder='Enter your message' value={newMessageData} onChange={onMessageChange} ref={newMessageElement} className={classes.messageInputArea}></textarea> */}\n                <div><MessageInputContainer sendMessage={props.sendMessage} /></div>\n{/*                 <div>\n                    <button onClick={sendMessage}>Send</button>\n                </div> */}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default Dialogs;","import { onMessageChangeActionCreator, sendMessageActionCreator } from './../../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n//import StoreContext from '../../StoreContext';\n\n\n\n/* const DialogsContainer = (props) => {\n\n    // let state = props.store.getState();\n    return (\n        <StoreContext.Consumer>\n            {\n            (store) => {\n                let state = store.getState();\n                \n                let sendMessage = () => {\n                    store.dispatch(sendMessageActionCreator());\n                }\n            \n                let onMessageChange = (messageText) => {\n                    let action = onMessageChangeActionCreator(messageText);\n                    store.dispatch(action);\n                }\n                 \n                return <Dialogs sendMessage={sendMessage}\n                    updateNewMessageData={onMessageChange}\n                    dialogsPage={state.dialogsPage} />\n                \n            }\n        }\n        </StoreContext.Consumer>\n    )\n} */\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (messageText) => {\n            dispatch(sendMessageActionCreator(messageText));\n        },/* \n        updateNewMessageData: (messageText) => {\n            let action = onMessageChangeActionCreator(messageText);\n            dispatch(action);\n        } */\n    }\n}\n\n\n/* let AuthRedirectComponent = withAuthRedirect(Dialogs);\n  \nlet DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\n\nexport default DialogsContainer; */\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"messageInputArea\":\"Dialogs_messageInputArea__2qcEU\"};","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n  })\n\n\nexport const withAuthRedirect = (Component) => {\n     class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\n            return <Component {...this.props} />\n        }\n     }\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    return ConnectedAuthRedirectComponent;\n}\n\n"],"sourceRoot":""}