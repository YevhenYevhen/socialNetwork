{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageInput.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.module.css"],"names":["DialogItem","props","path","id","useState","active","setActive","to","onClick","setMessageMode","className","classes","activeDialog","dialog","dialogPhoto","src","photo","alt","dialogName","name","messages","text","Message","message","authUserPhoto","MessageInputContainer","connect","state","dialogsPage","dispatch","sendMessage","messageId","action","sendMessageActionCreator","setMessageId","onSubmit","e","prevMessageId","validate","errors","length","render","handleSubmit","dialogsForm","input","meta","messageTextarea","placeholder","touched","error","sendButton","type","Dialogs","AlwaysScrollToBottom","elementRef","useRef","useEffect","current","scrollIntoView","ref","windowWidth","useWindowWidth","messageMode","messagesData","slice","reverse","dialogsElements","dialogsData","map","messagesElements","back","dialogsWrapper","dialogsContainer","messagesContainer","dialogsFormContainer","compose","auth","messageText","withAuthRedirect","module","exports"],"mappings":"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","file":"static/js/4.dc81e70f.chunk.js","sourcesContent":["import classes from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\nimport { useState } from 'react';\n\n\nconst DialogItem = (props) => {\n    let path = '/dialogs/' + props.id;\n\n    const [active, setActive] = useState(false)\n\n    const handleClick = () => {\n        setActive(!active);\n        props.setMessageMode(true);\n    }\n    \n\n\n    return (\n        <NavLink to={path}>\n            <div onClick={handleClick} className={active ? classes.activeDialog : classes.dialog}>\n                <img className={classes.dialogPhoto} src={props.photo} alt=\"\" />\n                <div>\n                    <div className={classes.dialogName}>{props.name}</div>\n                    <div>{props.messages[0].text}</div>\n                </div>\n\n               \n            </div>\n        </NavLink>\n    )\n}\n\nexport default DialogItem;","import classes from './../Dialogs.module.css';\n\nconst Message = (props) => {\n    \n    return (\n          <div>\n            <div className={classes.message}>\n                <img className={classes.dialogPhoto} src={props.authUserPhoto} alt=\"\" />\n                {props.text}\n            </div>\n            </div>\n    )\n}\n\nexport default Message;","import { useState } from 'react';\nimport { Form, Field } from 'react-final-form'\nimport { connect } from 'react-redux';\nimport { sendMessageActionCreator } from '../../redux/dialogsReducer';\nimport classes from './Dialogs.module.css';\n\n\nexport const MessageInput = (props) => {\nconst [messageId, setMessageId] = useState(36)\n  const onSubmit = (e) => {\n    if (e.message) {\n      props.sendMessage(e.message, messageId);\n      e.message = '';\n      setMessageId(prevMessageId => prevMessageId + 1)\n    }\n  }\n  const validate = (e) => {\n    const errors = {};\n    if (e.message && e.message.length === 0) {\n      errors.message = 'Enter a valid email';\n    }\n    return errors;\n  }\n\n  return <Form\n    onSubmit={onSubmit}\n    validate={validate}\n    render={({ handleSubmit }) => (\n      <form className={classes.dialogsForm} onSubmit={handleSubmit}>\n        <Field\n          name=\"message\"\n          render={({ input, meta }) => (\n            <>\n              <textarea className={classes.messageTextarea} placeholder='Enter your message' {...input} />\n              {meta.touched && meta.error && <span>{meta.error}</span>}\n            </>\n          )}\n        />\n        <button className={classes.sendButton} type=\"submit\">Send</button>\n      </form>\n    )}\n  />\n}\n\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (text, messageId) => {\n      let action = sendMessageActionCreator(text, messageId);\n      dispatch(action);\n    },\n  }\n}\n\n\n\nlet MessageInputContainer = connect(mapStateToProps, mapDispatchToProps)(MessageInput);\n\n\nexport default MessageInputContainer;\n","import React, { useState, useEffect, useRef } from 'react';\nimport classes from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport MessageInputContainer from './MessageInput';\nimport { useWindowWidth } from '../Common/useWindowWidth'\n\n\nconst Dialogs = (props) => {\n\n    const AlwaysScrollToBottom = () => {\n        const elementRef = useRef();\n        useEffect(() => elementRef.current.scrollIntoView());\n        return <div ref={elementRef} />;\n    };\n    const windowWidth = useWindowWidth();\n\n    const [messageMode, setMessageMode] = useState(false)\n    const messages = props.dialogsPage.messagesData.slice().reverse();\n\n    const dialogsElements = props.dialogsPage.dialogsData.map(dialog => <DialogItem\n        setMessageMode={setMessageMode} messages={messages}\n        name={dialog.name} key={dialog.id} id={dialog.id} photo={dialog.photo} />);\n    const messagesElements = props.dialogsPage.messagesData.map(message => <Message key={message.id}\n        authUserPhoto={props.authUserPhoto} text={message.text} />);\n    /* return (\n        <div className={classes.dialogsWrapper}>\n            {windowWidth < 700 && messageMode &&  <div onClick={() => setMessageMode(false)}>Back</div>}\n            {windowWidth < 700 && !messageMode && <div className={classes.dialogsContainer}>\n                {dialogsElements}\n            </div>}\n\n            {messageMode && <><div className={classes.messagesContainer}>\n                    {messagesElements}\n                    <AlwaysScrollToBottom />\n                </div>\n                <div className={classes.dialogsFormContainer} ><MessageInputContainer sendMessage={props.sendMessage} /></div></>\n            }\n                \n            </div>\n    ) */\n\n\n\n\n    if (windowWidth < 700)\n        return (<>\n            <div>{messageMode && <div className={classes.back} onClick={() => setMessageMode(false)}> &larr; Back</div>}</div>\n            <div className={classes.dialogsWrapper}>\n                {!messageMode && <div className={classes.dialogsContainer}>\n                    {dialogsElements}\n                </div>}\n                {messageMode && <>\n                    <div className={classes.messagesContainer}>\n                        {messagesElements}\n                        <AlwaysScrollToBottom />\n                    </div>\n                    <div className={classes.dialogsFormContainer}\n                    ><MessageInputContainer sendMessage={props.sendMessage} />\n                    </div>\n                </>\n                }\n            </div>\n        </>\n        )\n    if (windowWidth > 700)\n        return (\n            <div className={classes.dialogsWrapper}>\n                <div className={classes.dialogsContainer}>\n                    {dialogsElements}\n                </div>\n                <div className={classes.messagesContainer}>\n                    {messagesElements}\n                    <AlwaysScrollToBottom />\n                </div>\n                <div className={classes.dialogsFormContainer} ><MessageInputContainer sendMessage={props.sendMessage} /></div>\n            </div>\n        )\n}\n\n\n\nexport default Dialogs;","import { sendMessageActionCreator } from './../../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n//import StoreContext from '../../StoreContext';\n\n\n\n/* const DialogsContainer = (props) => {\n\n    // let state = props.store.getState();\n    return (\n        <StoreContext.Consumer>\n            {\n            (store) => {\n                let state = store.getState();\n                \n                let sendMessage = () => {\n                    store.dispatch(sendMessageActionCreator());\n                }\n            \n                let onMessageChange = (messageText) => {\n                    let action = onMessageChangeActionCreator(messageText);\n                    store.dispatch(action);\n                }\n                 \n                return <Dialogs sendMessage={sendMessage}\n                    updateNewMessageData={onMessageChange}\n                    dialogsPage={state.dialogsPage} />\n                \n            }\n        }\n        </StoreContext.Consumer>\n    )\n} */\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n        authUserPhoto: state.auth.authUserPhoto\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (messageText) => {\n            dispatch(sendMessageActionCreator(messageText));\n        },/* \n        updateNewMessageData: (messageText) => {\n            let action = onMessageChangeActionCreator(messageText);\n            dispatch(action);\n        } */\n    }\n}\n\n\n/* let AuthRedirectComponent = withAuthRedirect(Dialogs);\n  \nlet DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\n\nexport default DialogsContainer; */\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__pMZCD\",\"dialogsContainer\":\"Dialogs_dialogsContainer__3xYxC\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"activeDialog\":\"Dialogs_activeDialog__3obRw\",\"dialogName\":\"Dialogs_dialogName__16_Nc\",\"messagesContainer\":\"Dialogs_messagesContainer__eYApo\",\"message\":\"Dialogs_message__1xIDh\",\"dialogsFormContainer\":\"Dialogs_dialogsFormContainer__3i9dL\",\"dialogsForm\":\"Dialogs_dialogsForm__34z_V\",\"messageTextarea\":\"Dialogs_messageTextarea__38AsC\",\"sendButton\":\"Dialogs_sendButton__14VVw\",\"dialogPhoto\":\"Dialogs_dialogPhoto__13kYp\",\"back\":\"Dialogs_back__1QNa9\"};"],"sourceRoot":""}